<!DOCTYPE html>
<html>
<head>
    <title>LogiTrax API – Build Guide & System Overview</title>
</head>
<body>

<h1>LogiTrax API – Build Guide & System Overview</h1>

<p>This README documents how to recreate the LogiTrax API from scratch. It covers the initial business logic and database integration (Activity 1), the development of RESTful API endpoints (Activity 2), and the implementation of secure authentication with JWT and role‑based authorization (Activity 3).</p>

<p>Each section details not only the original planned steps but also the modifications made to enhance the design.</p>

<hr>

<h2>Table of Contents</h2>
<ol>
    <li><a href="#activity-1-structuring-business-logic-and-database-integration">Activity 1: Structuring Business Logic and Database Integration</a></li>
    <li><a href="#activity-2-building-restful-api-endpoints">Activity 2: Building RESTful API Endpoints</a></li>
    <li><a href="#activity-3-jwt-authentication--securing-the-api">Activity 3: JWT Authentication & Securing the API</a></li>
    <li><a href="#activity-4-optimizing-performance-with-caching-and-copilot">Activity 4: Optimizing Performance with Caching and Copilot</a></li>
    <li><a href="#activity-5-strengthening-security-with-aspnet-identity-and-jwt">Activity 5: Strengthening Security with ASP.NET Identity and JWT</a></li>
</ol>

<hr>

<h2 id="activity-1-structuring-business-logic-and-database-integration">Activity 1: Structuring Business Logic and Database Integration</h2>

<details>
<summary><strong>Expand for details</strong></summary>
<div>
    <h3>1. Project Setup</h3>
    <ul>
        <li>Open Visual Studio Code.</li>
        <li>Create a new ASP.NET Core Web API project using the CLI:
            <pre><code>dotnet new webapi -n LogiTrax</code></pre>
        </li>
        <li>Create a <strong>Models</strong> folder and add two new class files:
            <ul>
                <li><em>InventoryItem.cs</em></li>
                <li><em>Order.cs</em></li>
            </ul>
        </li>
    </ul>

    <h3>2. Define the Core Models</h3>
    <ul>
        <li>In <em>InventoryItem.cs</em>, define a product with properties such as:
            <ul>
                <li><code>ItemId</code>, <code>Name</code>, <code>Quantity</code>, and <code>Location</code>.</li>
            </ul>
        </li>
        <li>Implement a <code>DisplayInfo()</code> method in <em>InventoryItem.cs</em>:
            <pre><code>[ Item: GamePal | Quantity: 12 | Location: Warehouse A ]</code></pre>
        </li>
        <li>In <em>Order.cs</em>, define an order with properties like:
            <ul>
                <li><code>OrderId</code>, <code>CustomerName</code>, <code>DatePlaced</code>, and a list to hold ordered items.</li>
            </ul>
        </li>
        <li>Test these models in a sample block of code (in <code>Program.cs</code> or a dedicated test controller).</li>
    </ul>

    <h3>3. Database Integration with EF Core</h3>
    <ul>
        <li>Add EF Core packages via NuGet:
            <pre><code>dotnet add package Microsoft.EntityFrameworkCore.Sqlite
dotnet add package Microsoft.EntityFrameworkCore.Tools</code></pre>
        </li>
        <li>Create the <em>LogiTraxContext.cs</em> file to establish a connection to a SQLite database and configure the model relationships.</li>
    </ul>

    <h3>Modifications and Enhancements Made</h3>
    <ul>
        <li>Identified design issues with the original <code>Order</code> model that directly held a list of <code>InventoryItem</code> objects, leading to duplicate key conflicts and foreign key constraint issues.</li>
        <li><strong>Improvement:</strong> Introduced a new entity, <em>OrderItem.cs</em>, to hold references to <code>InventoryItem</code> by ID along with the ordered quantity. Updated <em>Order.cs</em> to include a list of <code>OrderItem</code> objects.</li>
        <li>Updated <em>LogiTraxContext.cs</em> to define proper relationships and cascade delete rules between <code>InventoryItem</code>, <code>Order</code>, and <code>OrderItem</code>.</li>
    </ul>

    <h3>Submission Checklist</h3>
    <ul>
        <li>Two working classes: <code>InventoryItem</code> and <code>Order</code>.</li>
        <li>Test data with basic output shown in the console or controller.</li>
        <li><code>LogiTraxContext</code> with EF Core integration.</li>
        <li>Database successfully created and tested.</li>
        <li>Copilot-assisted review applied.</li>
    </ul>
</div>
</details>

<hr>

<h2 id="activity-2-building-restful-api-endpoints">Activity 2: Building RESTful API Endpoints</h2>

<details>
<summary><strong>Expand for details</strong></summary>
<div>
    <h3>1. Creating the Controllers</h3>
    <ul>
        <li>In the <strong>Controllers</strong> folder, create two controller files:
            <ul>
                <li><em>InventoryController.cs</em></li>
                <li><em>OrderController.cs</em></li>
            </ul>
        </li>
    </ul>

    <h3>2. Developing Inventory Endpoints</h3>
    <ul>
        <li>In <em>InventoryController.cs</em>, implement endpoints for:
            <ul>
                <li><code>GET /api/inventory</code> to return all inventory items.</li>
                <li><code>POST /api/inventory</code> to add a new inventory item.</li>
                <li><code>DELETE /api/inventory/{id}</code> to remove an inventory item.</li>
            </ul>
        </li>
        <li>Use dependency injection to access <em>LogiTraxContext.cs</em>.</li>
    </ul>

    <h3>3. Developing Order Endpoints</h3>
    <ul>
        <li>In <em>OrderController.cs</em>, implement endpoints for:
            <ul>
                <li><code>GET /api/orders</code> to list all orders.</li>
                <li><code>GET /api/orders/{id}</code> to return the full details of a specific order.</li>
                <li><code>POST /api/orders</code> to create a new order (accepting a JSON payload with customer name, date placed, and an array of order items including inventoryItem IDs and quantities).</li>
                <li><code>DELETE /api/orders/{id}</code> to remove an order.</li>
            </ul>
        </li>
    </ul>

    <h3>4. Endpoint Testing</h3>
    <ul>
        <li>Test these endpoints using Swagger or Postman to verify that the inventory and orders are created and persisted as expected.</li>
    </ul>

    <h3>Modifications and Enhancements Made</h3>
    <ul>
        <li>Enhanced order operations to verify stock availability, subtract ordered quantities, and create orders with associated <code>OrderItem</code> records.</li>
        <li>Implemented inventory cleanup endpoint in <em>InventoryController.cs</em> to consolidate duplicate or orphaned inventory records.</li>
        <li>Applied Copilot suggestions to improve error handling, asynchronous operations, and route design.</li>
    </ul>

    <h3>Submission Checklist</h3>
    <ul>
        <li>Two API Controllers: <em>InventoryController</em> and <em>OrderController</em>.</li>
        <li>Working <code>GET</code>, <code>POST</code>, <code>DELETE</code> routes for both controllers.</li>
        <li>Routes tested in Swagger or Postman.</li>
        <li>Microsoft Copilot suggestions applied.</li>
    </ul>
</div>
</details>

<hr>

<h2 id="activity-3-jwt-authentication--securing-the-api">Activity 3: JWT Authentication & Securing the API</h2>

<details>
<summary><strong>Expand for details</strong></summary>
<div>
    <h3>1. Configuring ASP.NET Identity and JWT</h3>
    <ul>
        <li>Register ASP.NET Identity services using a custom user model (e.g., <em>ApplicationUser</em>).</li>
        <li>Configure EF Core to work with Identity.</li>
        <li>Set up JWT authentication in <code>Program.cs</code>, including validation parameters (issuer, audience, secret), and specify claim mapping (NameClaimType and RoleClaimType).</li>
        <li>Configure necessary JWT settings (Secret, ValidIssuer, ValidAudience) in the configuration file (e.g., <em>appsettings.json</em>).</li>
    </ul>

    <h3>2. Implementing Authentication Endpoints</h3>
    <ul>
        <li>Create <em>AuthController.cs</em> with:
            <ul>
                <li>A registration endpoint (<code>POST /api/auth/register</code>) for new user creation.</li>
                <li>A login endpoint (<code>POST /api/auth/login</code>) that authenticates the user and generates a JWT token that includes role claims.</li>
            </ul>
        </li>
        <li>Ensure the JWT token properly includes the user’s roles (especially the "Manager" role for administrative endpoints).</li>
    </ul>

    <h3>3. Integrating Swagger with JWT</h3>
    <ul>
        <li>Update Swagger configuration in <code>Program.cs</code> to define a JWT security scheme.</li>
        <li>Ensure an <strong>Authorize</strong> button appears in the Swagger UI so that a JWT token (prefixed with “Bearer”) can be easily applied for testing secured endpoints.</li>
    </ul>

    <h3>4. Securing Endpoints</h3>
    <ul>
        <li>Secure specific endpoints (for example, the user search endpoint in <em>UsersController.cs</em>) using <code>[Authorize(Roles = "Manager")]</code>. This ensures that only users with the appropriate role (e.g., a manager) can access these routes.</li>
    </ul>

    <h3>5. Database Seeding for Security</h3>
    <ul>
        <li>Update the seeding logic in <code>Program.cs</code> to apply EF Core migrations, seed sample inventory data, create the "Manager" role if it does not exist, and create a test manager user (e.g., manager@example.com).</li>
    </ul>

    <h3>Modifications and Enhancements Made</h3>
    <ul>
        <li>Ensured that the JWT token includes role claims by modifying the login endpoint and explicitly mapping claims in the JWT authentication configuration.</li>
        <li>Swagger was configured to support the JWT bearer token, allowing for an easy testing method during development.</li>
        <li>Additional endpoints (such as a paginated, partial-match user search) were secured using role-based authorization, providing a robust design for administrative operations.</li>
    </ul>

    <h3>Submission Checklist</h3>
    <ul>
        <li>ASP.NET Identity installed and configured.</li>
        <li>ApplicationUser model created.</li>
        <li>Registration and login routes added.</li>
        <li>JWT token-based authentication implemented.</li>
        <li>Routes secured with <code>[Authorize]</code> and roles.</li>
        <li>Copilot suggestions reviewed and applied.</li>
        <li>Database updated with Identity schema.</li>
    </ul>
</div>
</details>

<hr>

<h2 id="activity-4-optimizing-performance-with-caching-and-copilot">Activity 4: Optimizing Performance with Caching and Copilot</h2>

<details>
<summary><strong>Expand for details</strong></summary>
<div>
    <h3>1. Enable In-Memory Caching</h3>
    <ul>
        <li>Register caching in <code>Program.cs</code> using <code>builder.Services.AddMemoryCache()</code>.</li>
        <li>Inject <code>IMemoryCache</code> in the controllers that require caching (e.g., <em>InventoryController</em>).</li>
    </ul>

    <h3>2. Cache Frequently Accessed Data</h3>
    <ul>
        <li>Modify the GET endpoint in <em>InventoryController</em> to first check for a cached inventory list.</li>
        <li>If the cache key (e.g., "InventoryList") is not found, query the database using a no‑tracking approach and then store the result in the cache with an absolute expiration (e.g., 30 seconds).</li>
    </ul>

    <h3>3. Analyze and Optimize Queries</h3>
    <ul>
        <li>In controllers (such as <em>OrderController</em>), use <code>.Include()</code> and <code>.ThenInclude()</code> to eager-load related data, reducing N+1 issues.</li>
        <li>Use <code>.AsNoTracking()</code> for read-only queries to boost performance.</li>
    </ul>

    <h3>4. Measure Improvements</h3>
    <ul>
        <li>Instrument endpoints using timing methods (like the <code>Stopwatch</code> class) or profiling tools.</li>
        <li>Log the elapsed time for cache hits versus direct DB calls to verify enhancements.</li>
    </ul>

    <h3>5. Use Copilot to Review and Enhance Performance</h3>
    <ul>
        <li>Pose prompts such as “Suggest performance improvements in this controller” and “Improve the speed of this API endpoint.”</li>
        <li>Apply Microsoft Copilot’s suggestions to refine the caching logic, query optimizations, and overall controller performance.</li>
    </ul>

    <h3>Modifications and Enhancements Made</h3>
    <ul>
        <li>Caching was implemented in the GET endpoint of <em>InventoryController</em>, reducing repeated database calls and lowering response times.</li>
        <li>Query optimizations were applied across controllers using <code>.Include()</code>, <code>.ThenInclude()</code>, and <code>.AsNoTracking()</code> to eliminate redundant calls and accelerate data retrieval.</li>
        <li>Diagnostic logging (using <code>Stopwatch</code>) was added to compare performance between cached and non-cached requests.</li>
        <li>Copilot suggestions were integrated to further streamline controller logic and enhance error handling.</li>
        <li>Cache invalidation was added to update or delete endpoints (such as inventory cleanup and posting new inventory) ensuring fresh data on subsequent GET requests.</li>
    </ul>

    <h3>Submission Checklist</h3>
    <ul>
        <li>In-memory caching implemented on at least one route.</li>
        <li>Query optimizations applied in controller logic.</li>
        <li>Slow or repeated queries reduced or eliminated.</li>
        <li>Cache expiration policy in place.</li>
        <li>Copilot prompts used to refine logic.</li>
        <li>Improvements verified through testing or time measurement.</li>
    </ul>
</div>
</details>

<hr>

<h2 id="activity-5-strengthening-security-with-aspnet-identity-and-jwt">Activity 5: Strengthening Security with ASP.NET Identity and JWT</h2>

<details>
<summary><strong>Expand for details</strong></summary>
<div>
    <h3>1. ASP.NET Identity Configuration</h3>
    <ul>
        <li>Integrated ASP.NET Identity by extending the DbContext from <code>IdentityDbContext&lt;ApplicationUser&gt;</code>.</li>
        <li>Configured Identity options and updated the database with the Identity schema.</li>
    </ul>

    <h3>2. User Model and Authentication Endpoints</h3>
    <ul>
        <li>Created the <code>ApplicationUser</code> model inheriting from <code>IdentityUser</code>, allowing for custom user properties.</li>
        <li>Developed <code>AuthController</code> with dedicated endpoints for user registration and login.</li>
        <li>Defined <code>RegisterModel</code> and <code>LoginModel</code> to handle registration and login data respectively.</li>
    </ul>

    <h3>3. JWT Token Generation</h3>
    <ul>
        <li>Configured JWT settings (issuer, audience, expiration, and signing credentials) in the application configuration.</li>
        <li>The login endpoint generates a JWT token that includes user identity and role claims.</li>
        <li>Tokens are set to expire after 3 hours, providing a secure session without undue persistence.</li>
    </ul>

    <h3>4. Securing Routes</h3>
    <ul>
        <li>Applied the <code>[Authorize]</code> attribute on protected routes, ensuring that only authenticated users and authorized roles (e.g., "Manager") can access them.</li>
        <li>Implemented role-based claims extraction so that secured endpoints can enforce fine-grained access.</li>
    </ul>

    <h3>5. Copilot Guidance and Testing</h3>
    <ul>
        <li>Leveraged Copilot’s suggestions to optimize registration and login logic.</li>
        <li>Verified the complete authentication workflow using Swagger: registering a user, logging in, and passing the Bearer token to secured endpoints.</li>
        <li>Confirmed that both regular users and managers receive valid JWT tokens that enforce appropriate route restrictions.</li>
    </ul>

    <h3>Modifications and Enhancements Made</h3>
    <ul>
        <li>Enabled full integration of ASP.NET Identity and updated the database with Identity schema.</li>
        <li>Created and tested registration and login endpoints with comprehensive input validation.</li>
        <li>Implemented secure JWT token generation with embedded identity and role claims.</li>
        <li>Secured API endpoints using <code>[Authorize]</code> attributes, ensuring robust access control.</li>
        <li>Incorporated Copilot suggestions to improve code clarity and strengthen security measures.</li>
        <li>Confirmed end-to-end functionality through Swagger testing, ensuring that JWT tokens work as expected.</li>
    </ul>

    <h3>Submission Checklist</h3>
    <ul>
        <li>ASP.NET Identity configured and operational.</li>
        <li><code>ApplicationUser</code> model and required data models created.</li>
        <li>Registration and login routes added and tested.</li>
        <li>JWT token-based authentication implemented.</li>
        <li>Routes secured with <code>[Authorize]</code> and role restrictions.</li>
        <li>Copilot suggestions reviewed and integrated.</li>
        <li>Successful end-to-end testing with Swagger.</li>
    </ul>
</div>
</details>

<hr>

<p>Following this guide will allow anyone to recreate the LogiTrax API from scratch with a robust, modern, and secure architecture.</p>

</body>
</html>

